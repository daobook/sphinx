# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2021, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 4.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-10 09:16+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../development/tutorials/recipe.rst:2
msgid "Developing a \"recipe\" extension"
msgstr "开发 \"recipe\" 插件"

#: ../../development/tutorials/recipe.rst:4
msgid ""
"The objective of this tutorial is to illustrate roles, directives and "
"domains. Once complete, we will be able to use this extension to describe"
" a recipe and reference that recipe from elsewhere in our documentation."
msgstr ""
"本教程的目的是说明角色、指令和域。"
"一旦完成，我们将能够使用这个插件来描述食谱，并在我们的文档的其他地方引用该食谱。"

#: ../../development/tutorials/recipe.rst:10
msgid ""
"This tutorial is based on a guide first published on `opensource.com`_ "
"and is provided here with the original author's permission."
msgstr ""
"本教程基于第一次发布在 `opensource.com`_ 的指南，并在原始作者的允许下提供。"

#: ../../development/tutorials/recipe.rst:17
msgid "Overview"
msgstr "概述"

#: ../../development/tutorials/recipe.rst:19
msgid "We want the extension to add the following to Sphinx:"
msgstr "我们希望扩展添加以下 Sphinx："

#: ../../development/tutorials/recipe.rst:21
msgid ""
"A ``recipe`` :term:`directive`, containing some content describing the "
"recipe steps, along with a ``:contains:`` option highlighting the main "
"ingredients of the recipe."
msgstr ""
"``recipe`` :term:`directive`，包含一些描述食谱步骤的内容，以及 ``:contains:`` 选项，突出食谱的主要成分。"

#: ../../development/tutorials/recipe.rst:25
msgid ""
"A ``ref`` :term:`role`, which provides a cross-reference to the recipe "
"itself."
msgstr ""
"``ref`` :term:`role`，它提供了对配方本身的交叉引用。"

#: ../../development/tutorials/recipe.rst:28
msgid ""
"A ``recipe`` :term:`domain`, which allows us to tie together the above "
"role and domain, along with things like indices."
msgstr ""
"``recipe`` :term:`domain`，它允许我们把上面的角色和域联系在一起，还有索引之类的东西。"

#: ../../development/tutorials/recipe.rst:31
msgid "For that, we will need to add the following elements to Sphinx:"
msgstr "为此，我们需要向 Sphinx 添加以下元素："

#: ../../development/tutorials/recipe.rst:33
msgid "A new directive called ``recipe``"
msgstr "叫做 ``recipe`` 的新指令"

#: ../../development/tutorials/recipe.rst:35
msgid "New indexes to allow us to reference ingredient and recipes"
msgstr "新的索引允许我们参考 ingredient 和食谱"

#: ../../development/tutorials/recipe.rst:37
msgid ""
"A new domain called ``recipe``, which will contain the ``recipe`` "
"directive and ``ref`` role"
msgstr ""
"名为 ``recipe`` 的新域名，它将包含 ``recipe`` 指令和 ``ref`` 角色"

#: ../../development/tutorials/recipe.rst:42
msgid "Prerequisites"
msgstr "准备"

#: ../../development/tutorials/recipe.rst:44
msgid ""
"We need the same setup as in :doc:`the previous extensions <todo>`. This "
"time, we will be putting out extension in a file called "
":file:`recipe.py`."
msgstr ""
"我们需要相同的设置，如在 :doc:`以前的插件 <todo>`。"
"这一次，我们将把插件放在一个名为 :file:`recipe.py` 的文件中。"

#: ../../development/tutorials/recipe.rst:47
msgid "Here is an example of the folder structure you might obtain:"
msgstr "下面是一个你可能获得的文件夹结构的例子："

#: ../../development/tutorials/recipe.rst:59
msgid "Writing the extension"
msgstr "编写插件"

#: ../../development/tutorials/recipe.rst:61
msgid ""
"Open :file:`recipe.py` and paste the following code in it, all of which "
"we will explain in detail shortly:"
msgstr ""
"打开 :file:`recipe.py`，然后粘贴下面的代码进去，我们稍后会详细解释："

#: ../../development/tutorials/recipe.rst:68
msgid ""
"Let's look at each piece of this extension step-by-step to explain what's"
" going on."
msgstr ""
"让我们看看这个插件的每一块一步一步地解释发生了什么。"

#: ../../development/tutorials/recipe.rst:72
msgid "The directive class"
msgstr "指令类"

#: ../../development/tutorials/recipe.rst:73
msgid "The first thing to examine is the ``RecipeDirective`` directive:"
msgstr "首先要检查的是 RecipeDirective 指令："

#: ../../development/tutorials/recipe.rst:80
msgid ""
"Unlike :doc:`helloworld` and :doc:`todo`, this directive doesn't derive "
"from :class:`docutils.parsers.rst.Directive` and doesn't define a ``run``"
" method. Instead, it derives from "
":class:`sphinx.directives.ObjectDescription` and defines  "
"``handle_signature`` and ``add_target_and_index`` methods. This is "
"because ``ObjectDescription`` is a special-purpose directive that's "
"intended for describing things like classes, functions, or, in our case, "
"recipes. More specifically, ``handle_signature`` implements parsing the "
"signature of the directive and passes on the object's name and type to "
"its superclass, while ``add_taget_and_index`` adds a target (to link to) "
"and an entry to the index for this node."
msgstr ""
"不像 :doc:`helloworld` 和 :doc:`todo` ，"
"这个指令不是从 :class:`docutils.parsers.rst.Directive` 派生出来的，没有定义 ``run`` 方法。"
"相反，它源自 :class:`sphinx.directives.ObjectDescription` 对象描述并定义了 ``handle_signature`` "
"和 ``add_target_and_index`` 方法。这是因为 ``ObjectDescription`` 是一个特殊用途的指令，"
"旨在描述诸如类、函数或在我们的例子中，食谱之类的东西。"
"更具体地说， ``handle_signature`` 实现了对指令签名的解析，并将对象的名称和类型传递给它的超类，"
"而 ``add_taget_and_index`` 则为该节点的索引添加了一个目标（要链接到）和一个条目。"

#: ../../development/tutorials/recipe.rst:91
msgid ""
"We also see that this directive defines ``has_content``, "
"``required_arguments`` and ``option_spec``. Unlike the ``TodoDirective`` "
"directive added in the :doc:`previous tutorial <todo>`, this directive "
"takes a single argument, the recipe name, and an option, ``contains``, in"
" addition to the nested reStructuredText in the body."
msgstr ""
"我们还看到这个指令定义了 ``has_content``，``required_arguments`` 和 ``option_spec``。"
"不像在: :doc:`上个教程 <todo>` 中添加的 ``TodoDirective``，这个指令有一个参数，"
"配方名，一个选项，``contains``，除了嵌套的结构函数体中的 reStructuredText。"

#: ../../development/tutorials/recipe.rst:98
msgid "The index classes"
msgstr "index 类"

#: ../../development/tutorials/recipe.rst:101
msgid "待处理"
msgstr ""

#: ../../development/tutorials/recipe.rst:101
msgid "Add brief overview of indices"
msgstr "添加索引的简要概述"

#: ../../development/tutorials/recipe.rst:113
msgid ""
"Both ``IngredientIndex`` and ``RecipeIndex`` are derived from "
":class:`Index`. They implement custom logic to generate a tuple of values"
" that define the index. Note that ``RecipeIndex`` is a simple index that "
"has only one entry. Extending it to cover more object types is not yet "
"part of the code."
msgstr ""
"``IngredientIndex`` 和 ``RecipeIndex`` 都来源于 :class:`Index`。"
"它们实现定制逻辑来生成定义索引的值元组。"
"请注意，``RecipeIndex`` 是一个只有一个条目的简单索引。将其扩展到涵盖更多对象类型还不是代码的一部分。"

#: ../../development/tutorials/recipe.rst:118
msgid ""
"Both indices use the method :meth:`Index.generate` to do their work. This"
" method combines the information from our domain, sorts it, and returns "
"it in a list structure that will be accepted by Sphinx. This might look "
"complicated but all it really is is a list of tuples like ``('tomato', "
"'TomatoSoup', 'test', 'rec-TomatoSoup',...)``. Refer to the :doc:`domain "
"API guide </extdev/domainapi>` for more information on this API."
msgstr ""
"两个指数都使用了 :meth:`Index.generate` 的方法去做他们的工作。"
"这个方法组合来自我们的域的信息，对其进行排序，并以 Sphinx 可以接受的列表结构返回信息。"
"这看起来可能很复杂，但它实际上是一个元组列表，如 ``('tomato','TomatoSoup', 'test', 'rec-TomatoSoup',...)``。"
"请参考 :doc:`domain API guide </extdev/domainapi>` 获取更多关于这个 API 的信息。"

#: ../../development/tutorials/recipe.rst:125
msgid ""
"These index pages can be referred by combination of domain name and its "
"``name`` using :rst:role:`ref` role.  For example, ``RecipeIndex`` can be"
" referred by ``:ref:`recipe-recipe```."
msgstr ""
"这些索引页可以通过域名和它的 ``name`` 的组合来引用，使用 :rst:role:`ref` 角色。"
"例如，``RecipeIndex`` 可以由 ``:ref:`recipe-recipe``` 引用。"

#: ../../development/tutorials/recipe.rst:130
msgid "The domain"
msgstr "域"

#: ../../development/tutorials/recipe.rst:131
msgid ""
"A Sphinx domain is a specialized container that ties together roles, "
"directives, and indices, among other things. Let's look at the domain "
"we're creating here."
msgstr ""
"Sphinx 域是将角色、指令和索引等绑定在一起的专用容器。让我们看看在这里创建的域。"

#: ../../development/tutorials/recipe.rst:140
msgid ""
"There are some interesting things to note about this ``recipe`` domain "
"and domains in general. Firstly, we actually register our directives, "
"roles and indices here, via the ``directives``, ``roles`` and ``indices``"
" attributes, rather than via calls later on in ``setup``. We can also "
"note that we aren't actually defining a custom role and are instead "
"reusing the :class:`sphinx.roles.XRefRole` role and defining the "
":class:`sphinx.domains.Domain.resolve_xref` method. This method takes two"
" arguments, ``typ`` and ``target``, which refer to the cross-reference "
"type and its target name. We'll use ``target`` to resolve our destination"
" from our domain's ``recipes`` because we currently have only one type of"
" node."
msgstr ""
"关于这个 ``recipe`` 域和一般域，有一些有趣的事情需要注意。"
"首先，我们在这里通过 ``directives``，  ``roles`` 和 ``indices`` 属性来注册我们的指令、角色和索引，"
"而不是稍后在 ``setup`` 中调用。"
"还可以注意到，我们实际上并没有定义自定义角色，而是重用了 :class:`sphinx.roles.XRefRole` 方法，"
"并且定义了 :class:`sphinx.domains.Domain.resolve_xref` 方法。"
"该方法接受两个参数， ``typ`` 和 ``target``，它们引用交叉引用类型及其目标名称。"
"将使用 ``target`` 从我们的域 ``recipes`` 解析我们的目的地，因为我们目前只有一种类型的节点。"

#: ../../development/tutorials/recipe.rst:151
msgid ""
"Moving on, we can see that we've defined ``initial_data``. The values "
"defined in ``initial_data`` will be copied to "
"``env.domaindata[domain_name]`` as the initial data of the domain, and "
"domain instances can access it via ``self.data``. We see that we have "
"defined two items in ``initial_data``: ``recipes`` and "
"``recipe2ingredient``. These contain a list of all objects defined (i.e. "
"all recipes) and a hash that maps a canonical ingredient name to the list"
" of objects. The way we name objects is common across our extension and "
"is defined in the ``get_full_qualified_name`` method. For each object "
"created, the canonical name is ``recipe.<recipename>``, where "
"``<recipename>`` is the name the documentation writer gives the object (a"
" recipe). This enables the extension to use different object types that "
"share the same name. Having a canonical name and central place for our "
"objects is a huge advantage. Both our indices and our cross-referencing "
"code use this feature."
msgstr ""
"继续，可以看到我们已经定义了 ``initial_data``。"
"在 ``initial_data`` 中定义的值将被复制到 ``env.domaindata[domain_name]`` 中作为域的初始数据，"
"域实例可以通过 ``self.data`` 访问它。我们看到在 ``initial_data`` 中定义了两个项：``recipes`` 和 ``recipe2ingredient``。"
"它们包含所有已定义对象的列表（即所有菜谱）和一个将规范成分名称映射到对象列表的散列。"
"我们命名对象的方式在扩展中是通用的，在 ``get_full_qualified_name`` 方法中定义。"
"对于创建的每个对象，规范名称是 ``recipe.<recipename>``，其中 ``<recipename>`` 是文档编写者给对象（recipe）的名称。"
"这使得插件可以使用共享相同名称的不同对象类型。"
"拥有一个规范的名称和对象的中心位置是一个巨大的优势。我们的索引和交叉引用代码都使用了这个特性。"

#: ../../development/tutorials/recipe.rst:166
msgid "The ``setup`` function"
msgstr "``setup`` 函数"

#: ../../development/tutorials/recipe.rst:169
msgid ""
":doc:`As always <todo>`, the ``setup`` function is a requirement and is "
"used to hook the various parts of our extension into Sphinx. Let's look "
"at the ``setup`` function for this extension."
msgstr ""
":doc:`As always <todo>`， ``setup`` 函数是必需的，用于将扩展的各个部分钩到 Sphinx 中。"
"让我们看看这个扩展的 ``setup`` 函数。"

#: ../../development/tutorials/recipe.rst:178
msgid ""
"This looks a little different to what we're used to seeing. There are no "
"calls to :meth:`~Sphinx.add_directive` or even :meth:`~Sphinx.add_role`. "
"Instead, we have a single call to :meth:`~Sphinx.add_domain` followed by "
"some initialization of the :ref:`standard domain <domains-std>`. This is "
"because we had already registered our directives, roles and indexes as "
"part of the directive itself."
msgstr ""
"这看起来和我们以前看到的有点不同。"
"没有回调 :meth:`~Sphinx.add_directive` 或者 :meth:`~Sphinx.add_role`。"
"相反，我们有回调 :meth:`~Sphinx.add_domain` 后面跟着 :ref:`standard domain <domains-std>` 的初始化。"
"这是因为我们已经将指令、角色和索引注册为指令本身的一部分。"

#: ../../development/tutorials/recipe.rst:187
msgid "Using the extension"
msgstr "使用插件"

#: ../../development/tutorials/recipe.rst:189
msgid "You can now use the extension throughout your project. For example:"
msgstr "您现在可以在整个项目中使用插件。例如："

#: ../../development/tutorials/recipe.rst:191
msgid "index.rst"
msgstr ""

#: ../../development/tutorials/recipe.rst:204
msgid "tomato-soup.rst"
msgstr ""

#: ../../development/tutorials/recipe.rst:215
msgid ""
"The important things to note are the use of the ``:recipe:ref:`` role to "
"cross-reference the recipe actually defined elsewhere (using the "
"``:recipe:recipe:`` directive."
msgstr ""
"需要注意的重要一点是 ``:recipe:ref:`` 角色的使用，以交叉引用实际在别处定义的食谱（使用 ``:recipe:recipe:`` 指令）。"

#: ../../development/tutorials/recipe.rst:221
msgid "Further reading"
msgstr "进一步的阅读"

#: ../../development/tutorials/recipe.rst:223
msgid ""
"For more information, refer to the `docutils`_ documentation and "
":doc:`/extdev/index`."
msgstr ""
"更多信息，请参考 `docutils`_ documentation和 :doc:`/extdev/index`。"
