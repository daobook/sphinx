# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2021, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# xinetzone <735613050@qq.com>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 4.3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-05 12:22+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: xinetzone <735613050@qq.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../tutorial/deploying.rst:2
msgid "Appendix: Deploying a Sphinx project online"
msgstr "附录：在线部署 Sphinx 项目"

#: ../../tutorial/deploying.rst:4
msgid ""
"When you are ready to show your documentation project to the world, there"
" are many options available to do so. Since the HTML generated by Sphinx "
"is static, you can decouple the process of building your HTML "
"documentation from hosting such files in the platform of your choice. You"
" will not need a sophisticated server running Python: virtually every web"
" hosting service will suffice."
msgstr ""
"当你准备好向世界展示你的文档项目时，有很多选择可以做到这一点。"
"由于 Sphinx 生成的 HTML 是静态的，你可以把建立 HTML 文档的过程与在你选择的平台上托管这些文件的过程分开。"
"你不需要一个运行 Python 的复杂服务器：几乎所有的网络托管服务都足够了。"

#: ../../tutorial/deploying.rst:10
msgid ""
"Therefore, the challenge is less how or where to serve the static HTML, "
"but rather how to pick a workflow that automatically updates the deployed"
" documentation every time there is a change in the source files."
msgstr ""
"因此，挑战不在于如何或在哪里提供静态 HTML，而在于如何挑选一个工作流程，在每次源文件有变化时自动更新部署的文档。"

#: ../../tutorial/deploying.rst:14
msgid ""
"The following sections describe some of the available options to deploy "
"your online documentation, and give some background information. If you "
"want to go directly to the practical part, you can skip to :ref"
":`publishing-sources`."
msgstr ""
"以下各节描述了一些可用的选项来部署你的在线文档，并给出了一些背景信息。"
"如果你想直接进入实践部分，你可以跳到 :ref:`publishing-sources`。"

#: ../../tutorial/deploying.rst:19
msgid "Sphinx-friendly deployment options"
msgstr "对 Sphinx 友好的部署选项"

#: ../../tutorial/deploying.rst:21
msgid ""
"There are several possible options you have to host your Sphinx "
"documentation. Some of them are:"
msgstr ""
"你有几个可能的选择来托管你的Sphinx文档。其中一些是："

#: ../../tutorial/deploying.rst:28
msgid "**Read the Docs**"
msgstr ""

#: ../../tutorial/deploying.rst:25
msgid ""
"`Read the Docs`_ is an online service specialized in hosting technical "
"documentation written in Sphinx, as well as MkDocs. They have a number of"
" extra features, such as versioned documentation, traffic and search "
"analytics, custom domains, user-defined redirects, and more."
msgstr ""
"`Read the Docs`_ 是一项在线服务，专门托管用 Sphinx 以及 MkDocs 编写的技术文件。"
"他们有一些额外的功能，如版本化的文档，流量和搜索分析，自定义域名，用户定义的重定向，等等。"

#: ../../tutorial/deploying.rst:35
msgid "**GitHub Pages**"
msgstr ""

#: ../../tutorial/deploying.rst:31
msgid ""
"`GitHub Pages`_ is a simple static web hosting tightly integrated with "
"`GitHub`_: static HTML is served from one of the branches of a project, "
"and usually sources are stored in another branch so that the output can "
"be updated every time the sources change (for example using `GitHub "
"Actions`_). It is free to use and supports custom domains."
msgstr ""
"`GitHub Pages`_ 是一个与 `GitHub`_ 紧密结合的简单静态网站托管："
"静态 HTML 从项目的一个分支中提供，通常源代码存储在另一个分支中，"
"以便每次源代码改变时都能更新输出（例如，使用 `GitHub Actions`_）。"
"它是免费使用的，并支持自定义域名。"

#: ../../tutorial/deploying.rst:39
msgid "**GitLab Pages**"
msgstr ""

#: ../../tutorial/deploying.rst:38
msgid ""
"`GitLab Pages`_ is a similar concept to GitHub Pages, integrated with "
"`GitLab`_ and usually automated with `GitLab CI`_ instead."
msgstr ""
"`GitLab Pages`_ 是一个类似于 GitHub Pages 的概念，与 `GitLab`_ 集成，通常用 `GitLab CI`_ 代替自动。"

#: ../../tutorial/deploying.rst:45
msgid "**Netlify**"
msgstr ""

#: ../../tutorial/deploying.rst:42
msgid ""
"`Netlify`_ is a sophisticated hosting for static sites enhanced by "
"client-side web technologies like JavaScript (so-called `\"Jamstack\"`_)."
" They offer support for headless content management systems and "
"serverless computing."
msgstr ""
"`Netlify`_ 是一个复杂的托管，用于通过客户端网络技术如 JavaScript（所谓的 `Jamstack`_）来增强静态网站。"
"他们提供对 headless 内容管理系统和 serverless 计算的支持。"

#: ../../tutorial/deploying.rst:49
msgid "**Your own server**"
msgstr "**你自己的服务器**"

#: ../../tutorial/deploying.rst:48
msgid ""
"You can always use your own web server to host Sphinx HTML documentation."
" It is the option that gives more flexibility, but also more complexity."
msgstr ""
"你可以随时使用你自己的网络服务器来托管 Sphinx HTML 文档。"
"这是给人更多灵活性的选择，但也更复杂。"

#: ../../tutorial/deploying.rst:51
msgid ""
"All these options have zero cost, with the option of paying for extra "
"features."
msgstr ""
"所有这些选项都是零成本，可以选择为额外的功能付费。"

#: ../../tutorial/deploying.rst:64
msgid "Embracing the \"Docs as Code\" philosophy"
msgstr "拥护 \"文档即代码\" 理念"

#: ../../tutorial/deploying.rst:66
msgid ""
"The free offerings of most of the options listed above require your "
"documentation sources to be publicly available. Moreover, these services "
"expect you to use a `Version Control System`_, a technology that tracks "
"the evolution of a collection of files as a series of snapshots "
"(\"commits\"). The practice of writing documentation in plain text files "
"with the same tools as the ones used for software development is commonly"
" known as `\"Docs as Code\"`_."
msgstr ""
"上面列出的大多数选项的免费服务要求你的文件来源是公开可用的。"
"此外，这些服务希望你使用 `Version Control System`_，这是一种以一系列快照（\"commits\"）来跟踪文件集合的演变的技术。"
"用与软件开发相同的工具在纯文本文件中编写文档的做法通常被称为 `\"Docs as Code\"`_ 。"

#: ../../tutorial/deploying.rst:73
msgid ""
"The most popular Version Control System nowadays is Git_, a free and open"
" source tool that is the backbone of services like GitHub and GitLab. "
"Since both Read the Docs and Netlify have integrations with GitHub and "
"GitLab, and both GitHub and GitLab have an integrated Pages product, the "
"most effective way of automatically build your documentation online is to"
" upload your sources to either of these Git hosting services."
msgstr ""
"现在最流行的版本控制系统是 Git_，一个免费的开源工具，是 GitHub 和 GitLab 等服务的骨干。"
"由于 Read the Docs 和 Netlify 都与 GitHub 和 GitLab 有集成，"
"而且 GitHub 和 GitLab 都有集成的 Pages 产品，"
"所以自动在线建立文档的最有效方法是将你的源代码上传到这些 Git 托管服务中的任何一个。"

#: ../../tutorial/deploying.rst:87
msgid "Publishing your documentation sources"
msgstr "发布你的文档源码"

#: ../../tutorial/deploying.rst:90
msgid "GitHub"
msgstr ""

#: ../../tutorial/deploying.rst:92
msgid "The quickest way to upload an existing project to GitHub is to:"
msgstr "将现有项目上传到 GitHub 的最快捷方式是："

#: ../../tutorial/deploying.rst:94
msgid "`Sign up for a GitHub account <https://github.com/signup>`_."
msgstr "`注册一个 GitHub 账户 <https://github.com/signup>`_。"

#: ../../tutorial/deploying.rst:95
msgid "`Create a new repository <https://github.com/new>`_."
msgstr "`创建应该新的仓库 <https://github.com/new>`_。"

#: ../../tutorial/deploying.rst:96
msgid "Open `the \"Upload files\" page`_ of your new repository."
msgstr "打开新版本库的 `the \"Upload files\" page`_。"

#: ../../tutorial/deploying.rst:97
msgid ""
"Select the files on your operating system file browser (in your case "
"``README.rst``, ``lumache.py``, the makefiles under the ``docs`` "
"directory, and everything under ``docs/source``) and drag them to the "
"GitHub interface to upload them all."
msgstr ""
"在你的操作系统文件浏览器上选择文件"
"（在你的例子中是 ``README.rst``，``lumache.py``，``docs`` 目录下的 makefiles，"
"以及 ``docs/source`` 下的所有文件），然后把它们拖到 GitHub 界面，把它们全部上传。"

#: ../../tutorial/deploying.rst:101
msgid "Click on the :guilabel:`Commit changes` button."
msgstr "点击 :guilabel:`Commit changes` 按钮。"

#: ../../tutorial/deploying.rst:107 ../../tutorial/deploying.rst:147
msgid ""
"Make sure you don't upload the ``docs/build`` directory, as it contains "
"the output generated by Sphinx and it will change every time you change "
"the sources, complicating your workflow."
msgstr ""
"确保你不上传 ``docs/build`` 目录，因为它包含了 Sphinx 生成的输出，"
"每次你改变源头时它都会改变，使你的工作流程复杂化。"

#: ../../tutorial/deploying.rst:111
msgid ""
"These steps do not require access to the command line or installing any "
"additional software. To learn more, you can:"
msgstr ""
"这些步骤不需要访问命令行或安装任何其他软件。要了解更多，你可以："

#: ../../tutorial/deploying.rst:114
msgid ""
"Follow `this interactive GitHub course`_ to learn more about how the "
"GitHub interface works."
msgstr ""

#: ../../tutorial/deploying.rst:116
msgid ""
"Read `this quickstart tutorial`_ to install extra software on your "
"machine and have more flexibility. You can either use the Git command "
"line, or the GitHub Desktop application."
msgstr ""

#: ../../tutorial/deploying.rst:124
msgid "GitLab"
msgstr ""

#: ../../tutorial/deploying.rst:126
msgid ""
"Similarly to GitHub, the fastest way to upload your project to GitLab is "
"using the web interface:"
msgstr ""

#: ../../tutorial/deploying.rst:129
msgid "`Sign up for a GitLab account <https://gitlab.com/users/sign_up>`_."
msgstr ""

#: ../../tutorial/deploying.rst:130
msgid "`Create a new blank project <https://gitlab.com/projects/new>`_."
msgstr ""

#: ../../tutorial/deploying.rst:131
msgid ""
"Upload the project files (in your case ``README.rst``, ``lumache.py``, "
"the makefiles under the ``docs`` directory, and everything under "
"``docs/source``) one by one using the :guilabel:`Upload File` button "
"[#f1]_."
msgstr ""

#: ../../tutorial/deploying.rst:135
msgid ""
"Again, these steps do not require additional software on your computer. "
"To learn more, you can:"
msgstr ""

#: ../../tutorial/deploying.rst:138
msgid "Follow `this tutorial`_ to install Git on your machine."
msgstr ""

#: ../../tutorial/deploying.rst:139
msgid ""
"Browse the `GitLab User documentation`_ to understand the possibilities "
"of the platform."
msgstr ""

#: ../../tutorial/deploying.rst:151
msgid ""
"At the time of writing, `uploading whole directories to GitLab using only"
" the web interface <https://gitlab.com/gitlab-"
"org/gitlab/-/issues/228490>`_ is not yet implemented."
msgstr ""

#: ../../tutorial/deploying.rst:157
msgid "Publishing your HTML documentation"
msgstr "发布你的 HTML 文档"

#: ../../tutorial/deploying.rst:160
msgid "Read the Docs"
msgstr ""

#: ../../tutorial/deploying.rst:162
msgid ""
"`Read the Docs`_ offers integration with both GitHub and GitLab. The "
"quickest way of getting started is to follow :doc:`the RTD tutorial "
"<readthedocs:tutorial/index>`, which is loosely based on this one. You "
"can publish your sources on GitHub as explained :ref:`in the previous "
"section <publishing-sources>`, then skip directly to "
":ref:`readthedocs:tutorial/index:Sign up for Read the Docs`. If you "
"choose GitLab instead, the process is similar."
msgstr ""
"`Read the Docs`_ 提供了与 GitHub 和 GitLab 的整合。"
"最快的入门方法是遵循 :doc:`RTD 教程 <readthedocs:tutorial/index>`，它是松散地基于这个教程的。"
"你可以在 GitHub 上发布你的源代码，如 :ref:`上一节 <publishing-sources>` 所解释的那样，"
"然后直接跳到 :ref:`readthedocs:tutorial/index:Sign up for Read the Docs`。如果你选择 GitLab，过程也类似。"

#: ../../tutorial/deploying.rst:171
msgid "GitHub Pages"
msgstr ""

#: ../../tutorial/deploying.rst:173
msgid ""
"`GitHub Pages`_ requires you to :ref:`publish your sources <publishing-"
"sources>` on `GitHub`_. After that, you will need an automated process "
"that performs the ``make html`` step every time the sources change. That "
"can be achieved using `GitHub Actions`_."
msgstr ""
"`GitHub Pages`_ 要求你 :ref:`发布源码 <publishing-sources>` 在 `GitHub`_ 上发布。"
"之后，你将需要一个自动程序，在每次改变源的时候执行 ``make html`` 步骤。"
"这可以用 `GitHub Actions`_ 来实现。"

#: ../../tutorial/deploying.rst:178
msgid ""
"After you have published your sources on GitHub, create a file named "
"``.github/workflows/sphinx.yml`` in your repository with the following "
"contents:"
msgstr ""
"在 GitHub 上发布你的源代码后，在你的仓库中创建一个名为 ``.github/workflows/sphinx.yml`` 的文件，内容如下："

#: ../../tutorial/deploying.rst:182
msgid ".github/workflows/"
msgstr ""

#: ../../tutorial/deploying.rst:208
msgid "This contains a GitHub Actions workflow with a single job of four steps:"
msgstr "这包含了一个 GitHub Actions 的工作流程，其中有四个步骤的单一工作："

#: ../../tutorial/deploying.rst:210
msgid "Checkout the code."
msgstr "签出代码。"

#: ../../tutorial/deploying.rst:211 ../../tutorial/deploying.rst:269
msgid "Build the HTML documentation using Sphinx."
msgstr "使用 Sphinx 建立 HTML 文档。"

#: ../../tutorial/deploying.rst:212
msgid ""
"Attach the HTML output the artifacts to the GitHub Actions job, for "
"easier inspection."
msgstr ""
"将工件的 HTML 输出附加到 GitHub Actions 作业中，以便于自省。"

#: ../../tutorial/deploying.rst:214
msgid ""
"If the change happens on the default branch, take the contents of "
"``docs/build/html`` and push it to the ``gh-pages`` branch."
msgstr ""
"如果改变发生在默认分支上，就把 ``docs/build/html`` 的内容推送到 ``gh-pages`` 分支。"

#: ../../tutorial/deploying.rst:217
msgid ""
"Next, you need to specify the dependencies for the ``make html`` step to "
"be successful. For that, create a file ``docs/requirements.txt`` and add "
"the following contents:"
msgstr ""
"接下来，你需要为 ``make html`` 步骤的成功指定依赖性。"
"为此，创建一个文件 ``docs/requirements.txt`` 并添加以下内容："

#: ../../tutorial/deploying.rst:221
msgid "docs/requirements.txt"
msgstr ""

#: ../../tutorial/deploying.rst:226
msgid ""
"And finally, you are ready to `enable GitHub Pages on your repository`_. "
"For that, go to :guilabel:`Settings`, then :guilabel:`Pages` on the left "
"sidebar, select the ``gh-pages`` branch in the \"Source\" dropdown menu, "
"and click :guilabel:`Save`. After a few minutes, you should be able to "
"see your HTML at the designated URL."
msgstr ""
"最后，你已经准备好 `在你的仓库上启用 GitHub 页面`_ 了。"
"为此，进入 :guilabel:`Settings`，然后在左侧的 :guilabel:`Pages`，"
"在 `Source` 下拉菜单中选择 `gh-pages` 分支，然后点击 :guilabel:`Save`。"
"几分钟后，你应该能在指定的 URL 上看到你的 HTML。"

#: ../../tutorial/deploying.rst:235
msgid "GitLab Pages"
msgstr ""

#: ../../tutorial/deploying.rst:237
msgid ""
"`GitLab Pages`_, on the other hand, requires you to :ref:`publish your "
"sources <publishing-sources>` on `GitLab`_. When you are ready, you can "
"automate the process of running ``make html`` using `GitLab CI`_."
msgstr ""

#: ../../tutorial/deploying.rst:241
msgid ""
"After you have published your sources on GitLab, create a file named "
"``.gitlab-ci.yml`` in your repository with these contents:"
msgstr ""

#: ../../tutorial/deploying.rst:244
msgid ".gitlab-ci.yml"
msgstr ""

#: ../../tutorial/deploying.rst:266
msgid "This contains a GitLab CI workflow with one job of several steps:"
msgstr ""

#: ../../tutorial/deploying.rst:268
msgid "Install the necessary dependencies."
msgstr ""

#: ../../tutorial/deploying.rst:270
msgid "Move the output to a known artifacts location."
msgstr ""

#: ../../tutorial/deploying.rst:273
msgid ""
"You will need to `validate your account`_ by entering a payment method "
"(you will be charged a small amount that will then be reimbursed)."
msgstr ""

#: ../../tutorial/deploying.rst:278
msgid ""
"After that, if the pipeline is successful, you should be able to see your"
" HTML at the designated URL."
msgstr ""

