# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2024, the Sphinx developers
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 8.1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-12-24 10:30+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../extdev/appapi.rst:4
msgid "Application API"
msgstr ""

#: ../../extdev/appapi.rst:10
msgid ""
"Each Sphinx extension is a Python module with at least a :func:`setup` "
"function.  This function is called at initialization time with one "
"argument, the application object representing the Sphinx process."
msgstr ""

#: ../../extdev/appapi.rst:16
msgid "This application object has the public API described in the following."
msgstr ""

#: ../../extdev/appapi.rst:19
msgid "Extension setup"
msgstr ""

#: ../../extdev/appapi.rst:21
msgid "These methods are usually called in an extension's ``setup()`` function."
msgstr ""

#: ../../extdev/appapi.rst:23
msgid ""
"Examples of using the Sphinx extension API can be seen in the "
":mod:`sphinx.ext` package."
msgstr ""

#: of sphinx.application.Sphinx.setup_extension:1
msgid "Import and setup a Sphinx extension module."
msgstr ""

#: of sphinx.application.Sphinx.setup_extension:3
msgid ""
"Load the extension given by the module *name*.  Use this if your "
"extension needs the features provided by another extension.  No-op if "
"called twice."
msgstr ""

#: of sphinx.application.Sphinx.require_sphinx:1
msgid "Check the Sphinx version if requested."
msgstr ""

#: of sphinx.application.Sphinx.require_sphinx:3
msgid ""
"Compare *version* with the version of the running Sphinx, and abort the "
"build when it is too old."
msgstr ""

#: ../../extdev/appapi.rst
msgid "参数"
msgstr ""

#: of sphinx.application.Sphinx.require_sphinx:6
msgid "The required version in the form of ``major.minor`` or ``(major, minor)``."
msgstr ""

#: of sphinx.application.Sphinx.require_sphinx:10
msgid "Type of *version* now allows ``(major, minor)`` form."
msgstr ""

#: of sphinx.application.Sphinx.connect:1
msgid "Register *callback* to be called when *event* is emitted."
msgstr ""

#: of sphinx.application.Sphinx.connect:3
msgid ""
"For details on available core events and the arguments of callback "
"functions, please see :ref:`events`."
msgstr ""

#: of sphinx.application.Sphinx.connect:6
msgid "The name of target event"
msgstr ""

#: of sphinx.application.Sphinx.connect:7
msgid "Callback function for the event"
msgstr ""

#: of sphinx.application.Sphinx.connect:8
msgid ""
"The priority of the callback.  The callbacks will be invoked in order of "
"*priority* (ascending)."
msgstr ""

#: ../../extdev/appapi.rst
msgid "返回"
msgstr ""

#: of sphinx.application.Sphinx.connect:10
msgid "A listener ID.  It can be used for :meth:`disconnect`."
msgstr ""

#: of sphinx.application.Sphinx.connect:14
msgid "Support *priority*"
msgstr ""

#: of sphinx.application.Sphinx.disconnect:1
msgid "Unregister callback by *listener_id*."
msgstr ""

#: of sphinx.application.Sphinx.disconnect:3
msgid "A listener_id that :meth:`connect` returns"
msgstr ""

#: of sphinx.application.Sphinx.add_builder:1
msgid "Register a new builder."
msgstr ""

#: of sphinx.application.Sphinx.add_builder:3
msgid "A builder class"
msgstr ""

#: of sphinx.application.Sphinx.add_builder:4
msgid ""
"If true, install the builder forcedly even if another builder is already "
"installed as the same name"
msgstr ""

#: of sphinx.application.Sphinx.add_autodocumenter:15
#: sphinx.application.Sphinx.add_builder:7
#: sphinx.application.Sphinx.add_crossref_type:32
#: sphinx.application.Sphinx.add_directive:39
#: sphinx.application.Sphinx.add_directive_to_domain:14
#: sphinx.application.Sphinx.add_domain:9
#: sphinx.application.Sphinx.add_generic_role:11
#: sphinx.application.Sphinx.add_index_to_domain:12
#: sphinx.application.Sphinx.add_object_type:57
#: sphinx.application.Sphinx.add_role:12
#: sphinx.application.Sphinx.add_role_to_domain:14
#: sphinx.application.Sphinx.add_source_parser:11
#: sphinx.application.Sphinx.set_translator:13
msgid "Add *override* keyword."
msgstr ""

#: of sphinx.application.Sphinx.add_config_value:1
msgid "Register a configuration value."
msgstr ""

#: of sphinx.application.Sphinx.add_config_value:3
msgid ""
"This is necessary for Sphinx to recognize new values and set default "
"values accordingly."
msgstr ""

#: of sphinx.application.Sphinx.add_config_value:7
msgid ""
"The name of the configuration value.  It is recommended to be prefixed "
"with the extension name (ex. ``html_logo``, ``epub_title``)"
msgstr ""

#: of sphinx.application.Sphinx.add_config_value:9
msgid "The default value of the configuration."
msgstr ""

#: of sphinx.application.Sphinx.add_config_value:10
msgid ""
"The condition of rebuild.  It must be one of those values:  * ``'env'`` "
"if a change in the setting only takes effect when a   document is parsed "
"-- this means that the whole environment must be   rebuilt. * ``'html'`` "
"if a change in the setting needs a full rebuild of HTML   documents. * "
"``''`` if a change in the setting will not need any special rebuild."
msgstr ""

#: of sphinx.application.Sphinx.add_config_value:10
msgid "The condition of rebuild.  It must be one of those values:"
msgstr ""

#: of sphinx.application.Sphinx.add_config_value:12
msgid ""
"``'env'`` if a change in the setting only takes effect when a document is"
" parsed -- this means that the whole environment must be rebuilt."
msgstr ""

#: of sphinx.application.Sphinx.add_config_value:15
msgid ""
"``'html'`` if a change in the setting needs a full rebuild of HTML "
"documents."
msgstr ""

#: of sphinx.application.Sphinx.add_config_value:17
msgid "``''`` if a change in the setting will not need any special rebuild."
msgstr ""

#: of sphinx.application.Sphinx.add_config_value:18
msgid ""
"The type of configuration value.  A list of types can be specified.  For "
"example, ``[str]`` is used to describe a configuration that takes string "
"value."
msgstr ""

#: of sphinx.application.Sphinx.add_config_value:21
msgid "A short description of the configuration value."
msgstr ""

#: of sphinx.application.Sphinx.add_config_value:23
msgid ""
"If the *default* value is a callable, it will be called with the config "
"object as its argument in order to get the default value. This can be "
"used to implement config values whose default depends on other values."
msgstr ""

#: of sphinx.application.Sphinx.add_config_value:29
msgid ""
"Changed *rebuild* from a simple boolean (equivalent to ``''`` or "
"``'env'``) to a string.  However, booleans are still accepted and "
"converted internally."
msgstr ""

#: of sphinx.application.Sphinx.add_config_value:34
msgid "The *description* parameter."
msgstr ""

#: of sphinx.application.Sphinx.add_event:1
msgid "Register an event called *name*."
msgstr ""

#: of sphinx.application.Sphinx.add_event:3
msgid "This is needed to be able to emit it."
msgstr ""

#: of sphinx.application.Sphinx.add_event:5
msgid "The name of the event"
msgstr ""

#: of sphinx.application.Sphinx.set_translator:1
msgid "Register or override a Docutils translator class."
msgstr ""

#: of sphinx.application.Sphinx.set_translator:3
msgid ""
"This is used to register a custom output translator or to replace a "
"builtin translator.  This allows extensions to use a custom translator "
"and define custom nodes for the translator (see :meth:`add_node`)."
msgstr ""

#: of sphinx.application.Sphinx.set_translator:7
msgid "The name of the builder for the translator"
msgstr ""

#: of sphinx.application.Sphinx.set_translator:8
msgid "A translator class"
msgstr ""

#: of sphinx.application.Sphinx.set_translator:9
msgid ""
"If true, install the translator forcedly even if another translator is "
"already installed as the same name"
msgstr ""

#: of sphinx.application.Sphinx.add_node:1
msgid "Register a Docutils node class."
msgstr ""

#: of sphinx.application.Sphinx.add_node:3
msgid ""
"This is necessary for Docutils internals.  It may also be used in the "
"future to validate nodes in the parsed documents."
msgstr ""

#: of sphinx.application.Sphinx.add_enumerable_node:6
#: sphinx.application.Sphinx.add_node:6
msgid "A node class"
msgstr ""

#: of sphinx.application.Sphinx.add_node:7
msgid "Visitor functions for each builder (see below)"
msgstr ""

#: of sphinx.application.Sphinx.add_enumerable_node:19
#: sphinx.application.Sphinx.add_node:8
msgid ""
"If true, install the node forcedly even if another node is already "
"installed as the same name"
msgstr ""

#: of sphinx.application.Sphinx.add_node:11
msgid ""
"Node visitor functions for the Sphinx HTML, LaTeX, text and manpage "
"writers can be given as keyword arguments: the keyword should be one or "
"more of ``'html'``, ``'latex'``, ``'text'``, ``'man'``, ``'texinfo'`` or "
"any other supported translators, the value a 2-tuple of ``(visit, "
"depart)`` methods.  ``depart`` can be ``None`` if the ``visit`` function "
"raises :exc:`docutils.nodes.SkipNode`.  Example:"
msgstr ""

#: of sphinx.application.Sphinx.add_node:29
msgid ""
"Obviously, translators for which you don't specify visitor methods will "
"choke on the node when encountered in a document to translate."
msgstr ""

#: of sphinx.application.Sphinx.add_node:32
msgid "Added the support for keyword arguments giving visit functions."
msgstr ""

#: of sphinx.application.Sphinx.add_enumerable_node:1
msgid "Register a Docutils node class as a numfig target."
msgstr ""

#: of sphinx.application.Sphinx.add_enumerable_node:3
msgid ""
"Sphinx numbers the node automatically. And then the users can refer it "
"using :rst:role:`numref`."
msgstr ""

#: of sphinx.application.Sphinx.add_enumerable_node:7
msgid ""
"The type of enumerable nodes.  Each figtype has individual numbering "
"sequences.  As system figtypes, ``figure``, ``table`` and ``code-block`` "
"are defined.  It is possible to add custom nodes to these default "
"figtypes.  It is also possible to define new custom figtype if a new "
"figtype is given."
msgstr ""

#: of sphinx.application.Sphinx.add_enumerable_node:12
msgid ""
"A getter function to obtain the title of node.  It takes an instance of "
"the enumerable node, and it must return its title as string.  The title "
"is used to the default title of references for :rst:role:`ref`.  By "
"default, Sphinx searches ``docutils.nodes.caption`` or "
"``docutils.nodes.title`` from the node as a title."
msgstr ""

#: of sphinx.application.Sphinx.add_enumerable_node:18
msgid "Visitor functions for each builder (same as :meth:`add_node`)"
msgstr ""

#: of sphinx.application.Sphinx.add_directive:1
msgid "Register a Docutils directive."
msgstr ""

#: of sphinx.application.Sphinx.add_directive:3
msgid "The name of the directive"
msgstr ""

#: of sphinx.application.Sphinx.add_directive:4
#: sphinx.application.Sphinx.add_directive_to_domain:8
msgid "A directive class"
msgstr ""

#: of sphinx.application.Sphinx.add_directive:5
#: sphinx.application.Sphinx.add_directive_to_domain:9
msgid ""
"If false, do not install it if another directive is already installed as "
"the same name If true, unconditionally install the directive."
msgstr ""

#: of sphinx.application.Sphinx.add_directive:9
msgid ""
"For example, a custom directive named ``my-directive`` would be added "
"like this:"
msgstr ""

#: of sphinx.application.Sphinx.add_directive:32
msgid ""
"For more details, see `the Docutils docs "
"<https://docutils.sourceforge.io/docs/howto/rst-directives.html>`__ ."
msgstr ""

#: of sphinx.application.Sphinx.add_directive:35
msgid "Docutils 0.5-style directive classes are now supported."
msgstr ""

#: of sphinx.application.Sphinx.add_directive:37
msgid "Docutils 0.4-style (function based) directives support is deprecated."
msgstr ""

#: of sphinx.application.Sphinx.add_role:1
msgid "Register a Docutils role."
msgstr ""

#: of sphinx.application.Sphinx.add_role:3
msgid "The name of role"
msgstr ""

#: of sphinx.application.Sphinx.add_role:4
msgid "A role function"
msgstr ""

#: of sphinx.application.Sphinx.add_generic_role:6
#: sphinx.application.Sphinx.add_role:5
#: sphinx.application.Sphinx.add_role_to_domain:9
msgid ""
"If false, do not install it if another role is already installed as the "
"same name If true, unconditionally install the role."
msgstr ""

#: of sphinx.application.Sphinx.add_role:9
msgid ""
"For more details about role functions, see `the Docutils docs "
"<https://docutils.sourceforge.io/docs/howto/rst-roles.html>`__ ."
msgstr ""

#: of sphinx.application.Sphinx.add_generic_role:1
msgid "Register a generic Docutils role."
msgstr ""

#: of sphinx.application.Sphinx.add_generic_role:3
msgid ""
"Register a Docutils role that does nothing but wrap its contents in the "
"node given by *nodeclass*."
msgstr ""

#: of sphinx.application.Sphinx.add_domain:1
msgid "Register a domain."
msgstr ""

#: of sphinx.application.Sphinx.add_domain:3
msgid "A domain class"
msgstr ""

#: of sphinx.application.Sphinx.add_domain:4
msgid ""
"If false, do not install it if another domain is already installed as the"
" same name If true, unconditionally install the domain."
msgstr ""

#: of sphinx.application.Sphinx.add_directive_to_domain:1
msgid "Register a Docutils directive in a domain."
msgstr ""

#: of sphinx.application.Sphinx.add_directive_to_domain:3
msgid ""
"Like :meth:`add_directive`, but the directive is added to the domain "
"named *domain*."
msgstr ""

#: of sphinx.application.Sphinx.add_directive_to_domain:6
msgid "The name of target domain"
msgstr ""

#: of sphinx.application.Sphinx.add_directive_to_domain:7
msgid "A name of directive"
msgstr ""

#: of sphinx.application.Sphinx.add_role_to_domain:1
msgid "Register a Docutils role in a domain."
msgstr ""

#: of sphinx.application.Sphinx.add_role_to_domain:3
msgid "Like :meth:`add_role`, but the role is added to the domain named *domain*."
msgstr ""

#: of sphinx.application.Sphinx.add_index_to_domain:5
#: sphinx.application.Sphinx.add_role_to_domain:6
msgid "The name of the target domain"
msgstr ""

#: of sphinx.application.Sphinx.add_role_to_domain:7
msgid "The name of the role"
msgstr ""

#: of sphinx.application.Sphinx.add_role_to_domain:8
msgid "The role function"
msgstr ""

#: of sphinx.application.Sphinx.add_index_to_domain:1
msgid "Register a custom index for a domain."
msgstr ""

#: of sphinx.application.Sphinx.add_index_to_domain:3
msgid "Add a custom *index* class to the domain named *domain*."
msgstr ""

#: of sphinx.application.Sphinx.add_index_to_domain:6
msgid "The index class"
msgstr ""

#: of sphinx.application.Sphinx.add_index_to_domain:7
msgid ""
"If false, do not install it if another index is already installed as the "
"same name If true, unconditionally install the index."
msgstr ""

#: of sphinx.application.Sphinx.add_object_type:1
msgid "Register a new object type."
msgstr ""

#: of sphinx.application.Sphinx.add_object_type:3
msgid ""
"This method is a very convenient way to add a new :term:`object` type "
"that can be cross-referenced.  It will do this:"
msgstr ""

#: of sphinx.application.Sphinx.add_object_type:6
#, python-format
msgid ""
"Create a new directive (called *directivename*) for documenting an "
"object.  It will automatically add index entries if *indextemplate* is "
"nonempty; if given, it must contain exactly one instance of ``%s``.  See "
"the example below for how the template will be interpreted."
msgstr ""

#: of sphinx.application.Sphinx.add_object_type:11
msgid ""
"Create a new role (called *rolename*) to cross-reference to these object "
"descriptions."
msgstr ""

#: of sphinx.application.Sphinx.add_object_type:13
msgid ""
"If you provide *parse_node*, it must be a function that takes a string "
"and a docutils node, and it must populate the node with children parsed "
"from the string.  It must then return the name of the item to be used in "
"cross-referencing and index entries.  See the :file:`conf.py` file in the"
" source for this documentation for an example."
msgstr ""

#: of sphinx.application.Sphinx.add_object_type:19
msgid ""
"The *objname* (if not given, will default to *directivename*) names the "
"type of object.  It is used when listing objects, e.g. in search results."
msgstr ""

#: of sphinx.application.Sphinx.add_object_type:23
msgid "For example, if you have this call in a custom Sphinx extension::"
msgstr ""

#: of sphinx.application.Sphinx.add_object_type:27
msgid "you can use this markup in your documents::"
msgstr ""

#: of sphinx.application.Sphinx.add_object_type:37
msgid ""
"For the directive, an index entry will be generated as if you had "
"prepended ::"
msgstr ""

#: of sphinx.application.Sphinx.add_object_type:41
msgid ""
"The reference node will be of class ``literal`` (so it will be rendered "
"in a proportional font, as appropriate for code) unless you give the "
"*ref_nodeclass* argument, which must be a docutils node class.  Most "
"useful are ``docutils.nodes.emphasis`` or ``docutils.nodes.strong`` -- "
"you can also use ``docutils.nodes.generated`` if you want no further text"
" decoration.  If the text should be treated as literal (e.g. no smart "
"quote replacement), but not have typewriter styling, use "
"``sphinx.addnodes.literal_emphasis`` or "
"``sphinx.addnodes.literal_strong``."
msgstr ""

#: of sphinx.application.Sphinx.add_object_type:51
msgid ""
"For the role content, you have the same syntactical possibilities as for "
"standard Sphinx roles (see :ref:`xref-syntax`)."
msgstr ""

#: of sphinx.application.Sphinx.add_object_type:54
msgid ""
"If *override* is True, the given object_type is forcedly installed even "
"if an object_type having the same name is already installed."
msgstr ""

#: of sphinx.application.Sphinx.add_crossref_type:1
msgid "Register a new crossref object type."
msgstr ""

#: of sphinx.application.Sphinx.add_crossref_type:3
msgid ""
"This method is very similar to :meth:`~Sphinx.add_object_type` except "
"that the directive it generates must be empty, and will produce no "
"output."
msgstr ""

#: of sphinx.application.Sphinx.add_crossref_type:6
msgid ""
"That means that you can add semantic targets to your sources, and refer "
"to them using custom roles instead of generic ones (like "
":rst:role:`ref`).  Example call::"
msgstr ""

#: of sphinx.application.Sphinx.add_crossref_type:13
msgid "Example usage::"
msgstr ""

#: of sphinx.application.Sphinx.add_crossref_type:24
msgid ""
"(Of course, the element following the ``topic`` directive needn't be a "
"section.)"
msgstr ""

#: of sphinx.application.Sphinx.add_crossref_type:28
msgid ""
"If false, do not install it if another cross-reference type is already "
"installed as the same name If true, unconditionally install the cross-"
"reference type."
msgstr ""

#: of sphinx.application.Sphinx.add_transform:1
msgid "Register a Docutils transform to be applied after parsing."
msgstr ""

#: of sphinx.application.Sphinx.add_transform:3
msgid ""
"Add the standard docutils :class:`~docutils.transforms.Transform` "
"subclass *transform* to the list of transforms that are applied after "
"Sphinx parses a reST document."
msgstr ""

#: of sphinx.application.Sphinx.add_post_transform:7
#: sphinx.application.Sphinx.add_transform:7
msgid "A transform class"
msgstr ""

#: of sphinx.application.Sphinx.add_transform:9
msgid "priority range categories for Sphinx transforms"
msgstr ""

#: of sphinx.application.Sphinx.add_css_file:29
#: sphinx.application.Sphinx.add_js_file:34
#: sphinx.application.Sphinx.add_transform:12
msgid "Priority"
msgstr ""

#: of sphinx.application.Sphinx.add_css_file:30
#: sphinx.application.Sphinx.add_js_file:35
#: sphinx.application.Sphinx.add_transform:13
msgid "Main purpose in Sphinx"
msgstr ""

#: of sphinx.application.Sphinx.add_transform:14
msgid "0-99"
msgstr ""

#: of sphinx.application.Sphinx.add_transform:15
msgid "Fix invalid nodes by docutils. Translate a doctree."
msgstr ""

#: of sphinx.application.Sphinx.add_transform:16
msgid "100-299"
msgstr ""

#: of sphinx.application.Sphinx.add_transform:17
msgid "Preparation"
msgstr ""

#: of sphinx.application.Sphinx.add_transform:18
msgid "300-399"
msgstr ""

#: of sphinx.application.Sphinx.add_transform:19
msgid "early"
msgstr ""

#: of sphinx.application.Sphinx.add_transform:20
msgid "400-699"
msgstr ""

#: of sphinx.application.Sphinx.add_transform:21
msgid "main"
msgstr ""

#: of sphinx.application.Sphinx.add_transform:22
msgid "700-799"
msgstr ""

#: of sphinx.application.Sphinx.add_transform:23
msgid "Post processing. Deadline to modify text and referencing."
msgstr ""

#: of sphinx.application.Sphinx.add_transform:24
msgid "800-899"
msgstr ""

#: of sphinx.application.Sphinx.add_transform:25
msgid "Collect referencing and referenced nodes. Domain processing."
msgstr ""

#: of sphinx.application.Sphinx.add_transform:26
msgid "900-999"
msgstr ""

#: of sphinx.application.Sphinx.add_transform:27
msgid "Finalize and clean up."
msgstr ""

#: of sphinx.application.Sphinx.add_transform:29
msgid "refs: `Transform Priority Range Categories`__"
msgstr ""

#: of sphinx.application.Sphinx.add_post_transform:1
msgid "Register a Docutils transform to be applied before writing."
msgstr ""

#: of sphinx.application.Sphinx.add_post_transform:3
msgid ""
"Add the standard docutils :class:`~docutils.transforms.Transform` "
"subclass *transform* to the list of transforms that are applied before "
"Sphinx writes a document."
msgstr ""

#: of sphinx.application.Sphinx.add_js_file:1
msgid "Register a JavaScript file to include in the HTML output."
msgstr ""

#: of sphinx.application.Sphinx.add_js_file:3
msgid ""
"The name of a JavaScript file that the default HTML template will "
"include. It must be relative to the HTML static path, or a full URI with "
"scheme, or ``None`` . The ``None`` value is used to create an inline "
"``<script>`` tag.  See the description of *kwargs* below."
msgstr ""

#: of sphinx.application.Sphinx.add_js_file:9
msgid ""
"Files are included in ascending order of priority. If multiple JavaScript"
" files have the same priority, those files will be included in order of "
"registration. See list of \"priority range for JavaScript files\" below."
msgstr ""

#: of sphinx.application.Sphinx.add_js_file:13
msgid ""
"The loading method for the JavaScript file. Either ``'async'`` or "
"``'defer'`` are allowed."
msgstr ""

#: of sphinx.application.Sphinx.add_js_file:15
msgid ""
"Extra keyword arguments are included as attributes of the ``<script>`` "
"tag.  If the special keyword argument ``body`` is given, its value will "
"be added as the content of the  ``<script>`` tag."
msgstr ""

#: of sphinx.application.Sphinx.add_css_file:13
#: sphinx.application.Sphinx.add_js_file:20
msgid "Example::"
msgstr ""

#: of sphinx.application.Sphinx.add_js_file:31
msgid "priority range for JavaScript files"
msgstr ""

#: of sphinx.application.Sphinx.add_css_file:31
#: sphinx.application.Sphinx.add_js_file:36
msgid "200"
msgstr ""

#: of sphinx.application.Sphinx.add_js_file:37
msgid "default priority for built-in JavaScript files"
msgstr ""

#: of sphinx.application.Sphinx.add_css_file:33
#: sphinx.application.Sphinx.add_js_file:38
msgid "500"
msgstr ""

#: of sphinx.application.Sphinx.add_css_file:34
#: sphinx.application.Sphinx.add_js_file:39
msgid "default priority for extensions"
msgstr ""

#: of sphinx.application.Sphinx.add_css_file:35
#: sphinx.application.Sphinx.add_js_file:40
msgid "800"
msgstr ""

#: of sphinx.application.Sphinx.add_js_file:41
msgid "default priority for :confval:`html_js_files`"
msgstr ""

#: of sphinx.application.Sphinx.add_js_file:43
msgid ""
"A JavaScript file can be added to the specific HTML page when an "
"extension calls this method on :event:`html-page-context` event."
msgstr ""

#: of sphinx.application.Sphinx.add_js_file:48
msgid ""
"Renamed from ``app.add_javascript()``. And it allows keyword arguments as"
" attributes of script tag."
msgstr ""

#: of sphinx.application.Sphinx.add_js_file:52
msgid ""
"Take priority argument.  Allow to add a JavaScript file to the specific "
"page."
msgstr ""

#: of sphinx.application.Sphinx.add_js_file:54
msgid ""
"Take loading_method argument.  Allow to change the loading method of the "
"JavaScript file."
msgstr ""

#: of sphinx.application.Sphinx.add_css_file:1
msgid "Register a stylesheet to include in the HTML output."
msgstr ""

#: of sphinx.application.Sphinx.add_css_file:3
msgid ""
"The name of a CSS file that the default HTML template will include. It "
"must be relative to the HTML static path, or a full URI with scheme."
msgstr ""

#: of sphinx.application.Sphinx.add_css_file:6
msgid ""
"Files are included in ascending order of priority. If multiple CSS files "
"have the same priority, those files will be included in order of "
"registration. See list of \"priority range for CSS files\" below."
msgstr ""

#: of sphinx.application.Sphinx.add_css_file:10
msgid "Extra keyword arguments are included as attributes of the ``<link>`` tag."
msgstr ""

#: of sphinx.application.Sphinx.add_css_file:26
msgid "priority range for CSS files"
msgstr ""

#: of sphinx.application.Sphinx.add_css_file:32
msgid "default priority for built-in CSS files"
msgstr ""

#: of sphinx.application.Sphinx.add_css_file:36
msgid "default priority for :confval:`html_css_files`"
msgstr ""

#: of sphinx.application.Sphinx.add_css_file:38
msgid ""
"A CSS file can be added to the specific HTML page when an extension calls"
" this method on :event:`html-page-context` event."
msgstr ""

#: of sphinx.application.Sphinx.add_css_file:43
msgid ""
"Optional ``alternate`` and/or ``title`` attributes can be supplied with "
"the arguments *alternate* (a Boolean) and *title* (a string). The default"
" is no title and *alternate* = ``False``. For more information, refer to "
"the `documentation <https://mdn.io/Web/CSS/Alternative_style_sheets>`__."
msgstr ""

#: of sphinx.application.Sphinx.add_css_file:50
msgid ""
"Renamed from ``app.add_stylesheet()``. And it allows keyword arguments as"
" attributes of link tag."
msgstr ""

#: of sphinx.application.Sphinx.add_css_file:54
msgid "Take priority argument.  Allow to add a CSS file to the specific page."
msgstr ""

#: of sphinx.application.Sphinx.add_latex_package:1
msgid "Register a package to include in the LaTeX source code."
msgstr ""

#: of sphinx.application.Sphinx.add_latex_package:3
msgid ""
"Add *packagename* to the list of packages that LaTeX source code will "
"include.  If you provide *options*, it will be taken to the "
"`\\usepackage` declaration.  If you set *after_hyperref* truthy, the "
"package will be loaded after ``hyperref`` package."
msgstr ""

#: of sphinx.application.Sphinx.add_latex_package:18
msgid "*after_hyperref* option."
msgstr ""

#: of sphinx.application.Sphinx.add_lexer:1
msgid "Register a new lexer for source code."
msgstr ""

#: of sphinx.application.Sphinx.add_lexer:3
msgid "Use *lexer* to highlight code blocks with the given language *alias*."
msgstr ""

#: of sphinx.application.Sphinx.add_lexer:6
msgid "Take a lexer class as an argument."
msgstr ""

#: of sphinx.application.Sphinx.add_lexer:8
msgid "Removed support for lexer instances as an argument."
msgstr ""

#: of sphinx.application.Sphinx.add_autodocumenter:1
msgid "Register a new documenter class for the autodoc extension."
msgstr ""

#: of sphinx.application.Sphinx.add_autodocumenter:3
msgid ""
"Add *cls* as a new documenter class for the :mod:`sphinx.ext.autodoc` "
"extension.  It must be a subclass of "
":class:`sphinx.ext.autodoc.Documenter`.  This allows auto-documenting new"
" types of objects.  See the source of the autodoc module for examples on "
"how to subclass :class:`~sphinx.ext.autodoc.Documenter`."
msgstr ""

#: of sphinx.application.Sphinx.add_autodocumenter:9
msgid ""
"If *override* is True, the given *cls* is forcedly installed even if a "
"documenter having the same name is already installed."
msgstr ""

#: of sphinx.application.Sphinx.add_autodocumenter:12
msgid "See :ref:`autodoc_ext_tutorial`."
msgstr ""

#: of sphinx.application.Sphinx.add_autodoc_attrgetter:1
msgid "Register a new ``getattr``-like function for the autodoc extension."
msgstr ""

#: of sphinx.application.Sphinx.add_autodoc_attrgetter:3
msgid ""
"Add *getter*, which must be a function with an interface compatible to "
"the :func:`getattr` builtin, as the autodoc attribute getter for objects "
"that are instances of *typ*.  All cases where autodoc needs to get an "
"attribute of a type are then handled by this function instead of "
":func:`getattr`."
msgstr ""

#: of sphinx.application.Sphinx.add_search_language:1
msgid "Register a new language for the HTML search index."
msgstr ""

#: of sphinx.application.Sphinx.add_search_language:3
msgid ""
"Add *cls*, which must be a subclass of "
":class:`sphinx.search.SearchLanguage`, as a support language for building"
" the HTML full-text search index.  The class must have a *lang* attribute"
" that indicates the language it should be used for.  See "
":confval:`html_search_language`."
msgstr ""

#: of sphinx.application.Sphinx.add_source_suffix:1
msgid "Register a suffix of source files."
msgstr ""

#: of sphinx.application.Sphinx.add_source_suffix:3
msgid ""
"Same as :confval:`source_suffix`.  The users can override this using the "
"config setting."
msgstr ""

#: of sphinx.application.Sphinx.add_source_suffix:6
msgid ""
"If false, do not install it the same suffix is already installed. If "
"true, unconditionally install the suffix."
msgstr ""

#: of sphinx.application.Sphinx.add_source_parser:1
msgid "Register a parser class."
msgstr ""

#: of sphinx.application.Sphinx.add_source_parser:3
msgid ""
"If false, do not install it if another parser is already installed for "
"the same suffix. If true, unconditionally install the parser."
msgstr ""

#: of sphinx.application.Sphinx.add_source_parser:8
msgid ""
"*suffix* argument is deprecated.  It only accepts *parser* argument. Use "
":meth:`add_source_suffix` API to register suffix instead."
msgstr ""

#: of sphinx.application.Sphinx.add_env_collector:1
msgid "Register an environment collector class."
msgstr ""

#: of sphinx.application.Sphinx.add_env_collector:3
msgid "Refer to :ref:`collector-api`."
msgstr ""

#: of sphinx.application.Sphinx.add_html_theme:1
msgid "Register a HTML Theme."
msgstr ""

#: of sphinx.application.Sphinx.add_html_theme:3
msgid ""
"The *name* is a name of theme, and *theme_path* is a full path to the "
"theme (refs: :ref:`distribute-your-theme`)."
msgstr ""

#: of sphinx.application.Sphinx.add_html_math_renderer:1
msgid "Register a math renderer for HTML."
msgstr ""

#: of sphinx.application.Sphinx.add_html_math_renderer:3
msgid ""
"The *name* is a name of math renderer.  Both *inline_renderers* and "
"*block_renderers* are used as visitor functions for the HTML writer: the "
"former for inline math node (``nodes.math``), the latter for block math "
"node (``nodes.math_block``).  Regarding visitor functions, see "
":meth:`add_node` for details."
msgstr ""

#: of sphinx.application.Sphinx.add_message_catalog:1
msgid "Register a message catalog."
msgstr ""

#: of sphinx.application.Sphinx.add_message_catalog:3
msgid "The name of the catalog"
msgstr ""

#: of sphinx.application.Sphinx.add_message_catalog:4
msgid "The base path of the message catalog"
msgstr ""

#: of sphinx.application.Sphinx.add_message_catalog:6
msgid "For more details, see :func:`sphinx.locale.get_translation()`."
msgstr ""

#: of sphinx.application.Sphinx.is_parallel_allowed:1
msgid "Check whether parallel processing is allowed or not."
msgstr ""

#: of sphinx.application.Sphinx.is_parallel_allowed:3
msgid "A type of processing; ``'read'`` or ``'write'``."
msgstr ""

#: of sphinx.application.Sphinx.set_html_assets_policy:1
msgid "Set the policy to include assets in HTML pages."
msgstr ""

#: of sphinx.application.Sphinx.set_html_assets_policy:3
msgid "always: include the assets in all the pages"
msgstr ""

#: of sphinx.application.Sphinx.set_html_assets_policy:4
msgid "per_page: include the assets only in pages where they are used"
msgstr ""

#: ../../extdev/appapi.rst:102
msgid ""
"All these methods raise this exception if something went wrong with the "
"extension API."
msgstr ""

#: ../../extdev/appapi.rst:107
msgid "Emitting events"
msgstr ""

#: of sphinx.application.Sphinx.emit:1
#: sphinx.application.Sphinx.emit_firstresult:1
msgid "Emit *event* and pass *arguments* to the callback functions."
msgstr ""

#: of sphinx.application.Sphinx.emit:3
msgid ""
"Return the return values of all callbacks as a list.  Do not emit core "
"Sphinx events in extensions!"
msgstr ""

#: of sphinx.application.Sphinx.emit:6
#: sphinx.application.Sphinx.emit_firstresult:5
msgid "The name of event that will be emitted"
msgstr ""

#: of sphinx.application.Sphinx.emit:7
#: sphinx.application.Sphinx.emit_firstresult:6
msgid "The arguments for the event"
msgstr ""

#: of sphinx.application.Sphinx.emit:8
#: sphinx.application.Sphinx.emit_firstresult:7
msgid "The list of exceptions that are allowed in the callbacks"
msgstr ""

#: of sphinx.application.Sphinx.emit:12
#: sphinx.application.Sphinx.emit_firstresult:12
msgid "Added *allowed_exceptions* to specify path-through exceptions"
msgstr ""

#: of sphinx.application.Sphinx.emit_firstresult:3
msgid "Return the result of the first callback that doesn't return ``None``."
msgstr ""

#: ../../extdev/appapi.rst:118
msgid "Sphinx runtime information"
msgstr ""

#: ../../extdev/appapi.rst:120
msgid "The application object also provides runtime information as attributes."
msgstr ""

#: ../../extdev/appapi.rst:124
msgid "Target project.  See :class:`.Project`."
msgstr ""

#: ../../extdev/appapi.rst:128
msgid "Source directory."
msgstr ""

#: ../../extdev/appapi.rst:132
msgid "Directory containing ``conf.py``."
msgstr ""

#: ../../extdev/appapi.rst:136
msgid "Directory for storing pickled doctrees."
msgstr ""

#: ../../extdev/appapi.rst:140
msgid "Directory for storing built document."
msgstr ""

#: ../../../docstring of sphinx.application.Sphinx.fresh_env_used:1
msgid ""
"True/False as to whether a new environment was created for this build, or"
" None if the environment has not been initialised yet."
msgstr ""

#: ../../extdev/appapi.rst:145
msgid "Sphinx core events"
msgstr ""

#: ../../extdev/appapi.rst:147
msgid "Moved to :ref:`events`."
msgstr ""

#: ../../extdev/appapi.rst:150
msgid "Checking the Sphinx version"
msgstr ""

#: ../../extdev/appapi.rst:154
msgid "Use this to adapt your extension to API changes in Sphinx."
msgstr ""

#: ../../../docstring of sphinx.version_info:1
msgid "Version info for better programmatic use."
msgstr ""

#: ../../../docstring of sphinx.version_info:3
msgid ""
"A tuple of five elements; for Sphinx version 1.2.1 beta 3 this would be "
"``(1, 2, 1, 'beta', 3)``. The fourth element can be one of: ``alpha``, "
"``beta``, ``rc``, ``final``. ``final`` always has 0 as the last element."
msgstr ""

#: ../../../docstring of sphinx.version_info:7
msgid "Before version 1.2, check the string ``sphinx.__version__``."
msgstr ""

#: ../../extdev/appapi.rst:160
msgid "The Config object"
msgstr ""

#: of sphinx.config.Config:1
msgid "Configuration file abstraction."
msgstr ""

#: of sphinx.config.Config:3
msgid ""
"The Config object makes the values of all config options available as "
"attributes."
msgstr ""

#: of sphinx.config.Config:6
msgid ""
"It is exposed via the :py:class:`~sphinx.application.Sphinx`\\ "
"``.config`` and :py:class:`sphinx.environment.BuildEnvironment`\\ "
"``.config`` attributes. For example, to get the value of "
":confval:`language`, use either ``app.config.language`` or "
"``env.config.language``."
msgstr ""

#: ../../extdev/appapi.rst:173
msgid "The template bridge"
msgstr ""

#: of sphinx.application.TemplateBridge:1
msgid ""
"This class defines the interface for a \"template bridge\", that is, a "
"class that renders templates given a template name and a context."
msgstr ""

#: of sphinx.application.TemplateBridge.init:1
msgid "Called by the builder to initialize the template system."
msgstr ""

#: of sphinx.application.TemplateBridge.init:3
msgid ""
"*builder* is the builder object; you'll probably want to look at the "
"value of ``builder.config.templates_path``."
msgstr ""

#: of sphinx.application.TemplateBridge.init:6
msgid ""
"*theme* is a :class:`sphinx.theming.Theme` object or None; in the latter "
"case, *dirs* can be list of fixed directories to look for templates."
msgstr ""

#: of sphinx.application.TemplateBridge.newest_template_mtime:1
msgid ""
"Called by the builder to determine if output files are outdated because "
"of template changes.  Return the mtime of the newest template file that "
"was changed.  The default implementation returns ``0``."
msgstr ""

#: of sphinx.application.TemplateBridge.render:1
msgid ""
"Called by the builder to render a template given as a filename with a "
"specified context (a Python dictionary)."
msgstr ""

#: of sphinx.application.TemplateBridge.render_string:1
msgid ""
"Called by the builder to render a template given as a string with a "
"specified context (a Python dictionary)."
msgstr ""

#: ../../extdev/appapi.rst:184
msgid "Exceptions"
msgstr ""

#: of sphinx.errors.SphinxError:1
msgid "Base class for Sphinx errors."
msgstr ""

#: of sphinx.errors.SphinxError:3
msgid ""
"This is the base class for \"nice\" exceptions.  When such an exception "
"is raised, Sphinx will abort the build and present the exception category"
" and message to the user."
msgstr ""

#: of sphinx.errors.SphinxError:7
msgid ""
"Extensions are encouraged to derive from this exception for their custom "
"errors."
msgstr ""

#: of sphinx.errors.SphinxError:10
msgid ""
"Exceptions *not* derived from :exc:`SphinxError` are treated as "
"unexpected and shown to the user with a part of the traceback (and the "
"full traceback saved in a temporary file)."
msgstr ""

#: of sphinx.errors.SphinxError:16
msgid ""
"Description of the exception \"category\", used in converting the "
"exception to a string (\"category: message\").  Should be set accordingly"
" in subclasses."
msgstr ""

#: of sphinx.errors.ConfigError:1
msgid "Configuration error."
msgstr ""

#: of sphinx.errors.ExtensionError:1
msgid "Extension error."
msgstr ""

#: of sphinx.errors.ThemeError:1
msgid "Theme error."
msgstr ""

#: of sphinx.errors.VersionRequirementError:1
msgid "Incompatible Sphinx version error."
msgstr ""

